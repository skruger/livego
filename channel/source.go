package channel

import (
	"github.com/gwuhaolin/livego/av"
	log "github.com/sirupsen/logrus"
)

// Channel sources get added to RTMP streams as an av.WriteCloser
// These sources receive the data that the channel output will use
// a channel output implements the av.ReadCloser interface
// The channel instance is always outputting something through the av.ReadCloser
// interface and can get content from one of these sources:
// 1. Pre-content slate asset
// 2. Connected RTMP stream (multiple can be ready and a failover order defined)
// 3. Missing content slate asset
// 4. Static played asset (similar to slate assets, but longer and filling a schedule)
// 5. Post-content slate asset (static played asset on repeat)

// Sources are developed first to gain insight into what the raw av.Packet
// type looks like, how it can be buffered, and how it can be generated by
// reading a raw asset file from the disk or through ffmpeg transformations.

type streamSource struct {
	cm             *chunkMaker
	lastTimestamp  uint32
	closeError     error
	close          bool
	metadataPacket *av.Packet
}

func newStreamSource(sourceTag string) *streamSource {
	ss := &streamSource{
		cm:            &chunkMaker{sourceTag: sourceTag},
		lastTimestamp: 0,
		closeError:    nil,
		close:         false,
	}
	ss.cm.setMetadataCallback(func(p *av.Packet) {
		ss.metadataPacket = p
	})
	return ss
}

func (s *streamSource) reset() {
	s.close = false
	s.closeError = nil
	tag := s.cm.sourceTag
	s.cm = &chunkMaker{sourceTag: tag}
	s.lastTimestamp = 0
	s.metadataPacket = nil
}

func (s *streamSource) Write(packet *av.Packet) error {
	if s.close {
		log.Infof("resetting closed channel source aftere receiving new write: %p", s)
		s.reset()
	}
	s.cm.addPacket(packet)
	return nil
}

func (s *streamSource) Close(err error) {
	s.closeError = err
	s.close = true
}

func (s *streamSource) Info() av.Info {
	return av.Info{}
}

func (s *streamSource) Alive() bool {
	return true
}

func (s *streamSource) CalcBaseTimestamp() {
	log.Warningf("CalcBaseTimestamp() called for source %s", s.cm.sourceTag)
}
